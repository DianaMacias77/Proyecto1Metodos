/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/aux.ts":
/*!********************!*\
  !*** ./src/aux.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"chiSquaredAt\": () => (/* binding */ chiSquaredAt),\n/* harmony export */   \"getMiddleNumber\": () => (/* binding */ getMiddleNumber),\n/* harmony export */   \"isOnlyMDivisibleByFour\": () => (/* binding */ isOnlyMDivisibleByFour),\n/* harmony export */   \"isOnlyMDivisibleByPrime\": () => (/* binding */ isOnlyMDivisibleByPrime),\n/* harmony export */   \"isPrimeRelative\": () => (/* binding */ isPrimeRelative),\n/* harmony export */   \"kolmogorovAt\": () => (/* binding */ kolmogorovAt)\n/* harmony export */ });\n/* harmony import */ var _distributions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distributions */ \"./src/distributions.ts\");\n\nfunction getMiddleNumber(n) {\n    var numberString = n.toString();\n    var middle;\n    var middleNumber;\n    if ((numberString.length % 2) == 0) {\n        middle = (numberString.length - 4) / 2 + 1;\n        middleNumber = parseInt(numberString.substring(middle - 1, middle + 3));\n    }\n    else {\n        middle = Math.ceil((numberString.length - 4) / 2);\n        middleNumber = parseInt(numberString.substring(middle - 1, middle + 3));\n    }\n    return middleNumber;\n}\nfunction isPrimeRelative(a, b) {\n    var gcd = getGCD(a, b);\n    return gcd == 1;\n}\nfunction getGCD(a, b) {\n    if (b == 0) {\n        return a;\n    }\n    else {\n        return getGCD(b, a % b);\n    }\n}\nfunction isOnlyMDivisibleByPrime(m, a) {\n    var isMDivisible = true;\n    var primes = getPrimes(m);\n    primes.forEach(function (prime) {\n        if (a > prime) {\n            if (m % prime == 0) {\n                if ((a - 1) % prime != 0) {\n                    isMDivisible = false;\n                }\n            }\n        }\n    });\n    return isMDivisible;\n}\nfunction isOnlyMDivisibleByFour(m, a) {\n    var isMDivisible = true;\n    if ((m % 4) == 0) {\n        if ((a - 1) % 4 != 0) {\n            isMDivisible = false;\n        }\n    }\n    ;\n    return isMDivisible;\n}\nfunction getPrimes(n) {\n    var primes = [];\n    for (var i = 2; i <= n; i++) {\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n    return primes;\n}\nfunction isPrime(n) {\n    var isPrime = true;\n    for (var i = 2; i < n; i++) {\n        if (n % i == 0) {\n            isPrime = false;\n        }\n    }\n    return isPrime;\n}\nfunction chiSquaredAt(x, k) {\n    return inv(1 - x, k);\n}\nfunction inv(p, dof) {\n    return 2 * (0,_distributions__WEBPACK_IMPORTED_MODULE_0__.gammapinv)(p, 0.5 * dof);\n}\nfunction kolmogorovAt(a, n) {\n    return Math.sqrt((-Math.log(a / 2)) / 2) / Math.sqrt(n);\n}\n\n\n//# sourceURL=webpack:///./src/aux.ts?");

/***/ }),

/***/ "./src/class.ts":
/*!**********************!*\
  !*** ./src/class.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ChiSquaredInterval\": () => (/* binding */ ChiSquaredInterval),\n/* harmony export */   \"CombinedCongruentialResult\": () => (/* binding */ CombinedCongruentialResult),\n/* harmony export */   \"CongruentialInput\": () => (/* binding */ CongruentialInput),\n/* harmony export */   \"CongruentialResult\": () => (/* binding */ CongruentialResult),\n/* harmony export */   \"MixedCongruentialResult\": () => (/* binding */ MixedCongruentialResult),\n/* harmony export */   \"SquaredResult\": () => (/* binding */ SquaredResult),\n/* harmony export */   \"kolmgorovSmirnovResult\": () => (/* binding */ kolmgorovSmirnovResult)\n/* harmony export */ });\n/* harmony import */ var _aux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./aux */ \"./src/aux.ts\");\n\nvar SquaredResult = /** @class */ (function () {\n    function SquaredResult(seed) {\n        var preResult = seed * seed;\n        var result = (0,_aux__WEBPACK_IMPORTED_MODULE_0__.getMiddleNumber)(preResult);\n        this.seed = seed;\n        this.generator = preResult;\n        this.numberResult = result;\n        this.numberRandom = result / 10000;\n    }\n    return SquaredResult;\n}());\n\nvar CongruentialInput = /** @class */ (function () {\n    function CongruentialInput(seed, a, c, m) {\n        this.seed = seed;\n        this.a = a;\n        this.c = c;\n        this.m = m;\n    }\n    return CongruentialInput;\n}());\n\nvar CongruentialResult = /** @class */ (function () {\n    function CongruentialResult(input) {\n        var preModResult = ((input.seed * input.a) + input.c);\n        var result = preModResult % input.m;\n        this.seed = input.seed;\n        this.generator = \"(\".concat(input.a, \"(\").concat(input.seed, \")\").concat(input.c !== 0 ? \" + \" + input.c : \"\", \") mod \").concat(input.m, \" = \").concat(preModResult, \" mod \").concat(input.m);\n        this.numberResult = result;\n        this.numberRandom = result / input.m;\n    }\n    return CongruentialResult;\n}());\n\nvar MixedCongruentialResult = /** @class */ (function () {\n    function MixedCongruentialResult() {\n    }\n    return MixedCongruentialResult;\n}());\n\nvar CombinedCongruentialResult = /** @class */ (function () {\n    function CombinedCongruentialResult(inputs, m1) {\n        this.seeds = inputs.map(function (input) { return input.numberResult; });\n        var res = 0;\n        var generatorString = \"\";\n        for (var i = 0; i < inputs.length; i++) {\n            generatorString += \"((\".concat(inputs[i].numberResult, \"*\").concat(Math.pow(-1, i), \") +\");\n            res += inputs[i].numberResult * Math.pow(-1, i);\n        }\n        this.generator = generatorString.slice(0, -1) + \")mod \".concat(m1, \" = \").concat(res, \" mod \").concat(m1);\n        this.numberResult = res % (m1 - 1);\n        this.numberRandom = this.numberResult / (m1 - 1);\n    }\n    return CombinedCongruentialResult;\n}());\n\nvar ChiSquaredInterval = /** @class */ (function () {\n    function ChiSquaredInterval() {\n    }\n    return ChiSquaredInterval;\n}());\n\nvar kolmgorovSmirnovResult = /** @class */ (function () {\n    function kolmgorovSmirnovResult() {\n    }\n    return kolmgorovSmirnovResult;\n}());\n\n\n\n//# sourceURL=webpack:///./src/class.ts?");

/***/ }),

/***/ "./src/distributions.ts":
/*!******************************!*\
  !*** ./src/distributions.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gammapinv\": () => (/* binding */ gammapinv)\n/* harmony export */ });\nfunction gammaln(x) {\n    var cof = [\n        76.18009172947146, -86.50532032941677, 24.01409824083091,\n        -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5\n    ];\n    var ser = 1.000000000190015;\n    var xx, y, tmp;\n    tmp = (y = xx = x) + 5.5;\n    tmp -= (xx + 0.5) * Math.log(tmp);\n    for (var j = 0; j < 6; j++) {\n        ser += cof[j] / ++y;\n    }\n    return Math.log(2.5066282746310005 * ser / xx) - tmp;\n}\n;\nfunction gammap(a, x) {\n    var aln = gammaln(a);\n    var ap = a;\n    var sum = 1 / a;\n    var del = sum;\n    var b = x + 1 - a;\n    var c = 1 / 1.0e-30;\n    var d = 1 / b;\n    var h = d;\n    var i = 1;\n    // calculate maximum number of itterations required for a\n    var ITMAX = -~(Math.log((a >= 1) ? a : 1 / a) * 8.5 + a * 0.4 + 17);\n    var an, endval;\n    if (x < 0 || a <= 0) {\n        return NaN;\n    }\n    else if (x < a + 1) {\n        for (; i <= ITMAX; i++) {\n            sum += del *= x / ++ap;\n        }\n        return sum * Math.exp(-x + a * Math.log(x) - (aln));\n    }\n    for (; i <= ITMAX; i++) {\n        an = -i * (i - a);\n        b += 2;\n        d = an * d + b;\n        c = b + an / c;\n        d = 1 / d;\n        h *= d * c;\n    }\n    return 1 - h * Math.exp(-x + a * Math.log(x) - (aln));\n}\nfunction gammapinv(p, a) {\n    var j = 0;\n    var a1 = a - 1;\n    var EPS = 1e-8;\n    var gln = gammaln(a);\n    var x, err, t, u, pp, lna1, afac;\n    if (p >= 1) {\n        return Math.max(100, a + 100 * Math.sqrt(a));\n    }\n    if (p <= 0) {\n        return 0;\n    }\n    if (a > 1) {\n        lna1 = Math.log(a1);\n        afac = Math.exp(a1 * (lna1 - 1) - gln);\n        pp = (p < 0.5) ? p : 1 - p;\n        t = Math.sqrt(-2 * Math.log(pp));\n        x = (2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t;\n        if (p < 0.5) {\n            x = -x;\n        }\n        x = Math.max(1e-3, a * Math.pow(1 - 1 / (9 * a) - x / (3 * Math.sqrt(a)), 3));\n    }\n    else {\n        t = 1 - a * (0.253 + a * 0.12);\n        if (p < t) {\n            x = Math.pow(p / t, 1 / a);\n        }\n        else {\n            x = 1 - Math.log(1 - (p - t) / (1 - t));\n        }\n    }\n    for (; j < 12; j++) {\n        if (x <= 0)\n            return 0;\n        err = gammap(a, x) - p;\n        if (a > 1) {\n            t = afac * Math.exp(-(x - a1) + a1 * (Math.log(x) - lna1));\n        }\n        else {\n            t = Math.exp(-x + a1 * Math.log(x) - gln);\n        }\n        u = err / t;\n        x -= (t = u / (1 - 0.5 * Math.min(1, u * ((a - 1) / x - 1))));\n        if (x <= 0) {\n            x = 0.5 * (x + t);\n        }\n        if (Math.abs(t) < EPS * x) {\n            break;\n        }\n    }\n    return x;\n}\n;\n\n\n//# sourceURL=webpack:///./src/distributions.ts?");

/***/ }),

/***/ "./src/formulas.ts":
/*!*************************!*\
  !*** ./src/formulas.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"chiSquared\": () => (/* binding */ chiSquared),\n/* harmony export */   \"combinedCongruential\": () => (/* binding */ combinedCongruential),\n/* harmony export */   \"kolmgorovSmirnov\": () => (/* binding */ kolmgorovSmirnov),\n/* harmony export */   \"linealCongruential\": () => (/* binding */ linealCongruential),\n/* harmony export */   \"middleSquare\": () => (/* binding */ middleSquare),\n/* harmony export */   \"mixedCongruential\": () => (/* binding */ mixedCongruential),\n/* harmony export */   \"multiplicationCongruential\": () => (/* binding */ multiplicationCongruential)\n/* harmony export */ });\n/* harmony import */ var _class__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./class */ \"./src/class.ts\");\n/* harmony import */ var _aux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./aux */ \"./src/aux.ts\");\n\n\nfunction middleSquare(x0, n) {\n    var results = [];\n    var seed = x0;\n    for (var i = 0; i < n; i++) {\n        var res = new _class__WEBPACK_IMPORTED_MODULE_0__.SquaredResult(seed);\n        seed = res.numberResult;\n        results.push(res);\n    }\n    return results;\n}\nfunction linealCongruential(input, n) {\n    var result = [];\n    for (var i = 0; i < n; i++) {\n        var res = new _class__WEBPACK_IMPORTED_MODULE_0__.CongruentialResult(input);\n        input.seed = res.numberResult;\n        result.push(res);\n    }\n    return result;\n}\nfunction mixedCongruential(input, n) {\n    var result = new _class__WEBPACK_IMPORTED_MODULE_0__.MixedCongruentialResult();\n    result.completesRule1 = (0,_aux__WEBPACK_IMPORTED_MODULE_1__.isPrimeRelative)(input.a, input.m);\n    result.completesRule2 = (0,_aux__WEBPACK_IMPORTED_MODULE_1__.isOnlyMDivisibleByPrime)(input.m, input.a);\n    result.completesRule3 = (0,_aux__WEBPACK_IMPORTED_MODULE_1__.isOnlyMDivisibleByFour)(input.m, input.a);\n    result.result = linealCongruential(input, n);\n    return result;\n}\nfunction multiplicationCongruential(input, n) {\n    var result = [];\n    input.c = 0;\n    for (var i = 0; i < n; i++) {\n        var res = new _class__WEBPACK_IMPORTED_MODULE_0__.CongruentialResult(input);\n        input.seed = res.numberResult;\n        result.push(res);\n    }\n    return result;\n}\nfunction combinedCongruential(inputs, n) {\n    var finalResult = [];\n    var congruentialResults = [];\n    for (var i = 0; i < inputs.length; i++) {\n        congruentialResults.push(multiplicationCongruential(inputs[i], n));\n    }\n    console.log(congruentialResults);\n    //Loop the second index and then change the first index\n    // Save in an array the results with the same second index\n    for (var i = 0; i < n; i++) {\n        var results = [];\n        for (var j = 0; j < congruentialResults.length; j++) {\n            results.push(congruentialResults[j][i]);\n        }\n        finalResult.push(new _class__WEBPACK_IMPORTED_MODULE_0__.CombinedCongruentialResult(results, inputs[0].m));\n    }\n    return finalResult;\n}\nfunction chiSquared(randomNumbers) {\n    randomNumbers = randomNumbers.sort();\n    //let range = randomNumbers[randomNumbers.length - 1] - randomNumbers[0]\n    var range = 1;\n    var k = Math.ceil(3.322 * Math.log10(randomNumbers.length));\n    var cl = Math.ceil((range / k) / 0.01) * 0.01;\n    var intervals = [];\n    var _loop_1 = function (i) {\n        var interval = new _class__WEBPACK_IMPORTED_MODULE_0__.ChiSquaredInterval();\n        interval.min = i === 0 ? 0 : intervals[i - 1].max;\n        interval.max = interval.min + cl;\n        interval.values = randomNumbers.filter(function (x) { return x >= interval.min && x < interval.max; });\n        intervals.push(interval);\n    };\n    //create intervals\n    for (var i = 0; i < k; i++) {\n        _loop_1(i);\n    }\n    // Merge intervals when the interval has less than 5 values\n    for (var i = 1; i < intervals.length; i++) {\n        if (intervals[i - 1].values.length < 5) {\n            intervals[i].values = intervals[i].values.concat(intervals[i - 1].values);\n            intervals[i].min = intervals[i - 1].min;\n            intervals.splice((i - 1), 1);\n            i = 0;\n        }\n    }\n    //Calcualate the real probability for each interval using uniform distribution\n    var accProbability = 0;\n    intervals.forEach(function (interval) {\n        var theoricalProbability = (interval.max) - accProbability;\n        interval.theoricalProbability = theoricalProbability;\n        interval.theoricalFrequency = theoricalProbability * randomNumbers.length;\n        accProbability += interval.theoricalProbability;\n    });\n    var chiSquaredRes = 0;\n    intervals.forEach(function (interval) {\n        var oi = interval.values.length;\n        var ei = interval.theoricalFrequency;\n        var res = Math.pow((oi - ei), 2) / ei;\n        interval.result = res;\n        chiSquaredRes += res;\n    });\n    return { chiSquaredRes: chiSquaredRes, intervals: intervals };\n}\nfunction kolmgorovSmirnov(randomNumbers) {\n    randomNumbers = randomNumbers.sort();\n    var n = randomNumbers.length;\n    var dPlus = 0;\n    var dMinus = 0;\n    var results = [];\n    for (var i = 0; i < n; i++) {\n        var res = new _class__WEBPACK_IMPORTED_MODULE_0__.kolmgorovSmirnovResult();\n        var randomNumber = randomNumbers[i];\n        var theoricalProbabilityMax = i / n;\n        var theoricalProbabilityMin = (i - 1) / n;\n        res.randomNumber = randomNumber;\n        res.theoricalProbability = theoricalProbabilityMax;\n        var dPlusTemp = Math.abs(theoricalProbabilityMax - randomNumber);\n        var dMinusTemp = Math.abs(randomNumber - theoricalProbabilityMin);\n        res.theoricalMinusRandom = dPlusTemp;\n        res.randomMinusTheorical = dMinusTemp;\n        if (dPlusTemp > dPlus) {\n            dPlus = dPlusTemp;\n        }\n        if (dMinusTemp > dMinus) {\n            dMinus = dMinusTemp;\n        }\n        results.push(res);\n    }\n    return { dPlus: dPlus, dMinus: dMinus, results: results };\n}\n\n\n//# sourceURL=webpack:///./src/formulas.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _class__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./class */ \"./src/class.ts\");\n/* harmony import */ var _formulas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formulas */ \"./src/formulas.ts\");\n/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./view */ \"./src/view.ts\");\n/* harmony import */ var _aux__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./aux */ \"./src/aux.ts\");\n\n\n\n\n//const input = new CongruentialInput(5, 3, 0, 11)\n//const results: CongruentialResult[] = multiplicationCongruential(input, 10)\nvar randomNumbers = [];\nfunction middleSquaresHandler() {\n    var seed = parseInt(document.getElementById(\"seed\").value);\n    var n = parseInt(document.getElementById(\"n\").value);\n    var results = (0,_formulas__WEBPACK_IMPORTED_MODULE_1__.middleSquare)(seed, n);\n    if (checkIfChiSquaredChecked()) {\n        validateChiSquared(results.map(function (x) { return x.numberRandom; }));\n    }\n    if (checkIfKolmogorovSmirnovChecked()) {\n        validateKolmogorovSmirnov(results.map(function (x) { return x.numberRandom; }));\n    }\n    (0,_view__WEBPACK_IMPORTED_MODULE_2__.paintSquaredResult)(results);\n}\nfunction congruentialHandler() {\n    var seed = parseInt(document.getElementById(\"seed\").value);\n    var a = parseInt(document.getElementById(\"a\").value);\n    var c = parseInt(document.getElementById(\"c\").value);\n    var m = parseInt(document.getElementById(\"m\").value);\n    var n = parseInt(document.getElementById(\"n\").value);\n    var input = new _class__WEBPACK_IMPORTED_MODULE_0__.CongruentialInput(seed, a, c, m);\n    var results = (0,_formulas__WEBPACK_IMPORTED_MODULE_1__.linealCongruential)(input, n);\n    if (checkIfChiSquaredChecked()) {\n        validateChiSquared(results.map(function (x) { return x.numberRandom; }));\n    }\n    if (checkIfKolmogorovSmirnovChecked()) {\n        validateKolmogorovSmirnov(results.map(function (x) { return x.numberRandom; }));\n    }\n    (0,_view__WEBPACK_IMPORTED_MODULE_2__.paintCongruentialResult)(results);\n}\nfunction mixedCongruentialHandler() {\n    var seed = parseInt(document.getElementById(\"seed\").value);\n    var a = parseInt(document.getElementById(\"a\").value);\n    var c = parseInt(document.getElementById(\"c\").value);\n    var m = parseInt(document.getElementById(\"m\").value);\n    var n = parseInt(document.getElementById(\"n\").value);\n    var input = new _class__WEBPACK_IMPORTED_MODULE_0__.CongruentialInput(seed, a, c, m);\n    var results = (0,_formulas__WEBPACK_IMPORTED_MODULE_1__.mixedCongruential)(input, n);\n    (0,_view__WEBPACK_IMPORTED_MODULE_2__.paintMixedCongruentialResult)(results, a, m);\n}\nfunction congruentialMultiplicationHandler() {\n    var seed = parseInt(document.getElementById(\"seed\").value);\n    var a = parseInt(document.getElementById(\"a\").value);\n    var c = 0;\n    var m = parseInt(document.getElementById(\"m\").value);\n    var n = parseInt(document.getElementById(\"n\").value);\n    var input = new _class__WEBPACK_IMPORTED_MODULE_0__.CongruentialInput(seed, a, c, m);\n    var results = (0,_formulas__WEBPACK_IMPORTED_MODULE_1__.multiplicationCongruential)(input, n);\n    if (checkIfChiSquaredChecked()) {\n        validateChiSquared(results.map(function (x) { return x.numberRandom; }));\n    }\n    if (checkIfKolmogorovSmirnovChecked()) {\n        validateKolmogorovSmirnov(results.map(function (x) { return x.numberRandom; }));\n    }\n    (0,_view__WEBPACK_IMPORTED_MODULE_2__.paintCongruentialResult)(results);\n}\nfunction combinedCongruentialHandler() {\n    var k = parseInt(document.getElementById(\"k\").value);\n    var seed = document.getElementById(\"seed\").value.split(\",\").map(function (x) { return parseInt(x); });\n    var a = document.getElementById(\"a\").value.split(\",\").map(function (x) { return parseInt(x); });\n    var m = document.getElementById(\"m\").value.split(\",\").map(function (x) { return parseInt(x); });\n    var n = parseInt(document.getElementById(\"n\").value);\n    var inputs = [];\n    for (var i = 0; i < k; i++) {\n        var input = new _class__WEBPACK_IMPORTED_MODULE_0__.CongruentialInput(seed[i], a[i], 0, m[i]);\n        inputs.push(input);\n    }\n    if (seed.length === k && a.length === k && m.length === k) {\n        var results = (0,_formulas__WEBPACK_IMPORTED_MODULE_1__.combinedCongruential)(inputs, n);\n        if (checkIfChiSquaredChecked()) {\n            validateChiSquared(results.map(function (x) { return x.numberRandom; }));\n        }\n        if (checkIfKolmogorovSmirnovChecked()) {\n            validateKolmogorovSmirnov(results.map(function (x) { return x.numberRandom; }));\n        }\n        (0,_view__WEBPACK_IMPORTED_MODULE_2__.paintCombinedPeriod)(m);\n        (0,_view__WEBPACK_IMPORTED_MODULE_2__.paintCombinedCongruentialResult)(results);\n    }\n    else {\n        alert(\"All the arrays must be the same length as k\");\n    }\n}\nfunction checkIfChiSquaredChecked() {\n    var chiSquaredCheck = document.getElementById(\"chiSquaredCheck\").checked;\n    return chiSquaredCheck;\n}\nfunction getChiProbability() {\n    var chiProbability = parseFloat(document.getElementById(\"chiProbability\").value);\n    return chiProbability;\n}\nfunction validateChiSquared(numbers) {\n    var chiResult = (0,_formulas__WEBPACK_IMPORTED_MODULE_1__.chiSquared)(numbers);\n    var chiDistResult = (0,_aux__WEBPACK_IMPORTED_MODULE_3__.chiSquaredAt)(getChiProbability(), numbers.length - 1);\n    (0,_view__WEBPACK_IMPORTED_MODULE_2__.paintChiResult)(chiResult.intervals, chiResult.chiSquaredRes, chiDistResult);\n}\nfunction checkIfKolmogorovSmirnovChecked() {\n    var kolmogorovSmirnovCheck = document.getElementById(\"kolmogorovCheck\").checked;\n    return kolmogorovSmirnovCheck;\n}\nfunction getKolmogorovProbability() {\n    var kolmogorovProbability = parseFloat(document.getElementById(\"kolmogorovProbability\").value);\n    return kolmogorovProbability;\n}\nfunction validateKolmogorovSmirnov(numbers) {\n    var kolmogorovResult = (0,_formulas__WEBPACK_IMPORTED_MODULE_1__.kolmgorovSmirnov)(numbers);\n    var kolmogorovDistResult = (0,_aux__WEBPACK_IMPORTED_MODULE_3__.kolmogorovAt)(getKolmogorovProbability(), numbers.length);\n    (0,_view__WEBPACK_IMPORTED_MODULE_2__.paintKolmogorovResult)(kolmogorovResult.results, kolmogorovResult.dPlus, kolmogorovResult.dMinus, kolmogorovDistResult);\n}\n//Crear todos los handlers\n// Validar esos numeros aleatorios con pruebas de bondad\n// Hacer bonito el front\nwindow.middleSquaresHandler = middleSquaresHandler;\nwindow.congruentialHandler = congruentialHandler;\nwindow.mixedCongruentialHandler = mixedCongruentialHandler;\nwindow.congruentialMultiplicationHandler = congruentialMultiplicationHandler;\nwindow.combinedCongruentialHandler = combinedCongruentialHandler;\n\n\n//# sourceURL=webpack:///./src/index.ts?");

/***/ }),

/***/ "./src/view.ts":
/*!*********************!*\
  !*** ./src/view.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"paintChiResult\": () => (/* binding */ paintChiResult),\n/* harmony export */   \"paintCombinedCongruentialResult\": () => (/* binding */ paintCombinedCongruentialResult),\n/* harmony export */   \"paintCombinedPeriod\": () => (/* binding */ paintCombinedPeriod),\n/* harmony export */   \"paintCongruentialResult\": () => (/* binding */ paintCongruentialResult),\n/* harmony export */   \"paintKolmogorovResult\": () => (/* binding */ paintKolmogorovResult),\n/* harmony export */   \"paintMixedCongruentialResult\": () => (/* binding */ paintMixedCongruentialResult),\n/* harmony export */   \"paintSquaredResult\": () => (/* binding */ paintSquaredResult)\n/* harmony export */ });\nfunction paintSquaredResult(results) {\n    document.getElementById(\"tableBody\").innerHTML = \"\";\n    var row = document.createElement(\"tr\");\n    var indexCol = document.createElement(\"td\");\n    var indexText = document.createTextNode(\"0\");\n    indexCol.appendChild(indexText);\n    row.appendChild(indexCol);\n    var seedCol = document.createElement(\"td\");\n    var seedText = document.createTextNode(results[0].seed.toString());\n    seedCol.appendChild(seedText);\n    row.appendChild(seedCol);\n    var generatorCol = document.createElement(\"td\");\n    var generatorText = document.createTextNode(\"-\");\n    generatorCol.appendChild(generatorText);\n    row.appendChild(generatorCol);\n    var resultCol = document.createElement(\"td\");\n    var resultText = document.createTextNode(\"-\");\n    resultCol.appendChild(resultText);\n    row.appendChild(resultCol);\n    var randomCol = document.createElement(\"td\");\n    var randomText = document.createTextNode(\"-\");\n    randomCol.appendChild(randomText);\n    row.appendChild(randomCol);\n    document.getElementById(\"tableBody\").appendChild(row);\n    results.forEach(function (res, index) {\n        var row = document.createElement(\"tr\");\n        index += 1;\n        var indexCol = document.createElement(\"td\");\n        var indexText = document.createTextNode(index.toString());\n        indexCol.appendChild(indexText);\n        row.appendChild(indexCol);\n        var seedCol = document.createElement(\"td\");\n        var seedText = document.createTextNode(res.seed.toString());\n        seedCol.appendChild(seedText);\n        row.appendChild(seedCol);\n        var generatorCol = document.createElement(\"td\");\n        var generatorText = document.createTextNode(res.generator.toString());\n        generatorCol.appendChild(generatorText);\n        row.appendChild(generatorCol);\n        var resultCol = document.createElement(\"td\");\n        var resultText = document.createTextNode(res.numberResult.toString());\n        resultCol.appendChild(resultText);\n        row.appendChild(resultCol);\n        var randomCol = document.createElement(\"td\");\n        var randomText = document.createTextNode(res.numberRandom.toString());\n        randomCol.appendChild(randomText);\n        row.appendChild(randomCol);\n        document.getElementById(\"tableBody\").appendChild(row);\n    });\n}\nfunction paintCongruentialResult(results) {\n    document.getElementById(\"tableBody\").innerHTML = \"\";\n    var row = document.createElement(\"tr\");\n    var indexCol = document.createElement(\"td\");\n    var indexText = document.createTextNode(\"0\");\n    indexCol.appendChild(indexText);\n    row.appendChild(indexCol);\n    var seedCol = document.createElement(\"td\");\n    var seedText = document.createTextNode(results[0].seed.toString());\n    seedCol.appendChild(seedText);\n    row.appendChild(seedCol);\n    var generatorCol = document.createElement(\"td\");\n    var generatorText = document.createTextNode(\"-\");\n    generatorCol.appendChild(generatorText);\n    row.appendChild(generatorCol);\n    var resultCol = document.createElement(\"td\");\n    var resultText = document.createTextNode(\"-\");\n    resultCol.appendChild(resultText);\n    row.appendChild(resultCol);\n    var randomCol = document.createElement(\"td\");\n    var randomText = document.createTextNode(\"-\");\n    randomCol.appendChild(randomText);\n    row.appendChild(randomCol);\n    document.getElementById(\"tableBody\").appendChild(row);\n    results.forEach(function (res, index) {\n        var row = document.createElement(\"tr\");\n        index += 1;\n        var indexCol = document.createElement(\"td\");\n        var indexText = document.createTextNode(index.toString());\n        indexCol.appendChild(indexText);\n        row.appendChild(indexCol);\n        var seedCol = document.createElement(\"td\");\n        var seedText = document.createTextNode(res.seed.toString());\n        seedCol.appendChild(seedText);\n        row.appendChild(seedCol);\n        var generatorCol = document.createElement(\"td\");\n        var generatorText = document.createTextNode(res.generator);\n        generatorCol.appendChild(generatorText);\n        row.appendChild(generatorCol);\n        var resultCol = document.createElement(\"td\");\n        var resultText = document.createTextNode(res.numberResult.toString());\n        resultCol.appendChild(resultText);\n        row.appendChild(resultCol);\n        var randomCol = document.createElement(\"td\");\n        var randomText = document.createTextNode(res.numberRandom.toString());\n        randomCol.appendChild(randomText);\n        row.appendChild(randomCol);\n        document.getElementById(\"tableBody\").appendChild(row);\n    });\n}\nfunction paintMixedCongruentialResult(results, a, m) {\n    document.getElementById(\"hull\").innerHTML = \"\";\n    var ruleP1 = document.createElement(\"p\");\n    var ruletext1 = \"1. <strong>\".concat(a, \"</strong> y <strong>\").concat(m, \"</strong> son primos relativos <span class=\\\"\").concat(results.completesRule1 ? \"green\" : \"red\", \"\\\"> &#11044; </span>\");\n    ruleP1.innerHTML = ruletext1;\n    document.getElementById(\"hull\").appendChild(ruleP1);\n    var ruleP2 = document.createElement(\"p\");\n    var ruletext2 = \"1. <strong>\".concat(a, \" - 1</strong> es divisible por todos los factores primos de <strong>\").concat(m, \"</strong> <span class=\\\"\").concat(results.completesRule2 ? \"green\" : \"red\", \"\\\"> &#11044; </span>\");\n    ruleP2.innerHTML = ruletext2;\n    document.getElementById(\"hull\").appendChild(ruleP2);\n    var ruleP3 = document.createElement(\"p\");\n    var ruletext3 = \"1. <strong>\".concat(a, \" - 1</strong> es divisible por <strong>4</strong>, si <strong>\").concat(m, \"</strong> es divisible por <strong>4</strong> <span class=\\\"\").concat(results.completesRule2 ? \"green\" : \"red\", \"\\\"> &#11044; </span>\");\n    ruleP3.innerHTML = ruletext3;\n    document.getElementById(\"hull\").appendChild(ruleP3);\n    var ruleFinal = document.createElement(\"h4\");\n    var completesHullDobbell = results.completesRule1 && results.completesRule2 && results.completesRule3;\n    var ruleFinalText = \"<strong class=\\\"\".concat(completesHullDobbell ? \"green\" : \"red\", \"\\\">El m\\u00E9todo de Hull-Dobell es \").concat(completesHullDobbell ? \"aplicable\" : \"no aplicable\", \" </strong>\");\n    ruleFinal.innerHTML = ruleFinalText;\n    document.getElementById(\"hull\").appendChild(ruleFinal);\n    if (completesHullDobbell) {\n        paintCongruentialResult(results.result);\n    }\n}\nfunction paintCombinedCongruentialResult(results) {\n    document.getElementById(\"tableBody\").innerHTML = \"\";\n    var row = document.createElement(\"tr\");\n    var indexCol = document.createElement(\"td\");\n    var indexText = document.createTextNode(\"0\");\n    indexCol.appendChild(indexText);\n    row.appendChild(indexCol);\n    var seedCol = document.createElement(\"td\");\n    var seedText = document.createTextNode(results[0].seeds.toString());\n    seedCol.appendChild(seedText);\n    row.appendChild(seedCol);\n    var generatorCol = document.createElement(\"td\");\n    var generatorText = document.createTextNode(\"-\");\n    generatorCol.appendChild(generatorText);\n    row.appendChild(generatorCol);\n    var resultCol = document.createElement(\"td\");\n    var resultText = document.createTextNode(\"-\");\n    resultCol.appendChild(resultText);\n    row.appendChild(resultCol);\n    var randomCol = document.createElement(\"td\");\n    var randomText = document.createTextNode(\"-\");\n    randomCol.appendChild(randomText);\n    row.appendChild(randomCol);\n    document.getElementById(\"tableBody\").appendChild(row);\n    results.forEach(function (res, index) {\n        var row = document.createElement(\"tr\");\n        index += 1;\n        var indexCol = document.createElement(\"td\");\n        var indexText = document.createTextNode(index.toString());\n        indexCol.appendChild(indexText);\n        row.appendChild(indexCol);\n        var seedCol = document.createElement(\"td\");\n        var seedText = document.createTextNode(res.seeds.toString());\n        seedCol.appendChild(seedText);\n        row.appendChild(seedCol);\n        var generatorCol = document.createElement(\"td\");\n        var generatorText = document.createTextNode(res.generator);\n        generatorCol.appendChild(generatorText);\n        row.appendChild(generatorCol);\n        var resultCol = document.createElement(\"td\");\n        var resultText = document.createTextNode(res.numberResult.toString());\n        resultCol.appendChild(resultText);\n        row.appendChild(resultCol);\n        var randomCol = document.createElement(\"td\");\n        var randomText = document.createTextNode(res.numberRandom.toString());\n        randomCol.appendChild(randomText);\n        row.appendChild(randomCol);\n        document.getElementById(\"tableBody\").appendChild(row);\n    });\n}\nfunction paintCombinedPeriod(mArray) {\n    var period = 1;\n    var periodMultiplicationString = \"\";\n    mArray.forEach(function (m, index) {\n        period *= (m - 1);\n        periodMultiplicationString += \"(\".concat(m, \" - 1) \").concat(index != (mArray.length - 1) ? '*' : '', \" \");\n    });\n    period /= mArray.length;\n    document.getElementById(\"period\").innerHTML = \"El periodo es: <strong>(\".concat(periodMultiplicationString, \") / \").concat(mArray.length, \" = \").concat(period, \"</strong>\");\n}\nfunction paintChiResult(interval, calcChiResult, theoricalChiResult) {\n    var result = calcChiResult < theoricalChiResult;\n    document.getElementById(\"chiTableBody\").innerHTML = \"\";\n    interval.forEach(function (int, index) {\n        var row = document.createElement(\"tr\");\n        var indexCol = document.createElement(\"td\");\n        var indexText = document.createTextNode((index + 1).toString());\n        indexCol.appendChild(indexText);\n        row.appendChild(indexCol);\n        var intervalCol = document.createElement(\"td\");\n        var intervalText = document.createTextNode(\"\".concat(int.min.toFixed(4), \" - \").concat(int.max.toFixed(4)));\n        intervalCol.appendChild(intervalText);\n        row.appendChild(intervalCol);\n        var oiCol = document.createElement(\"td\");\n        var oiText = document.createTextNode(int.values.length.toString());\n        oiCol.appendChild(oiText);\n        row.appendChild(oiCol);\n        var probCol = document.createElement(\"td\");\n        var probText = document.createTextNode(int.theoricalProbability.toFixed(4).toString());\n        probCol.appendChild(probText);\n        row.appendChild(probCol);\n        var eiCol = document.createElement(\"td\");\n        var eiText = document.createTextNode(int.theoricalFrequency.toFixed(4).toString());\n        eiCol.appendChild(eiText);\n        row.appendChild(eiCol);\n        var resCol = document.createElement(\"td\");\n        var resText = document.createTextNode(int.result.toFixed(4).toString());\n        resCol.appendChild(resText);\n        row.appendChild(resCol);\n        document.getElementById(\"chiTableBody\").appendChild(row);\n    });\n    document.getElementById(\"chiConclusion\").innerHTML = \"\";\n    var resultCalc = document.createElement(\"p\");\n    var resultCalcText = document.createTextNode(\"El resultado de Chi Calculado es: \".concat(calcChiResult.toFixed(4)));\n    resultCalc.appendChild(resultCalcText);\n    document.getElementById(\"chiConclusion\").appendChild(resultCalc);\n    var resultTheo = document.createElement(\"p\");\n    var resultTheoText = document.createTextNode(\"El resultado de Chi Te\\u00F3rico es: \".concat(theoricalChiResult.toFixed(4)));\n    resultTheo.appendChild(resultTheoText);\n    document.getElementById(\"chiConclusion\").appendChild(resultTheo);\n    var resultFinal = document.createElement(\"h4\");\n    var resultText = \"<span class=\\\"\".concat(result ? \"green\" : \"red\", \"\\\"> &#11044; </span> <strong>\").concat(calcChiResult.toFixed(4), \" \").concat(result ? \"<\" : \"≰\", \" \").concat(theoricalChiResult.toFixed(4), \"</strong> \");\n    resultFinal.innerHTML = resultText;\n    document.getElementById(\"chiConclusion\").appendChild(resultFinal);\n}\nfunction paintKolmogorovResult(results, dPlus, dMinus, theoricalResult) {\n    var biggerD = dPlus > dMinus ? dPlus : dMinus;\n    var result = biggerD < theoricalResult;\n    document.getElementById(\"kolmogorovTableBody\").innerHTML = \"\";\n    results.forEach(function (res, index) {\n        var row = document.createElement(\"tr\");\n        var indexCol = document.createElement(\"td\");\n        var indexText = document.createTextNode((index + 1).toString());\n        indexCol.appendChild(indexText);\n        row.appendChild(indexCol);\n        var randomCol = document.createElement(\"td\");\n        var randomText = document.createTextNode(res.randomNumber.toString());\n        randomCol.appendChild(randomText);\n        row.appendChild(randomCol);\n        var theoricalCol = document.createElement(\"td\");\n        var theoricalText = document.createTextNode(res.theoricalProbability.toString());\n        theoricalCol.appendChild(theoricalText);\n        row.appendChild(theoricalCol);\n        var randomMinusTheoCol = document.createElement(\"td\");\n        var randomMinusTheoText = document.createTextNode(res.randomMinusTheorical.toFixed(4).toString());\n        randomMinusTheoCol.appendChild(randomMinusTheoText);\n        row.appendChild(randomMinusTheoCol);\n        var theoMinusRandom = document.createElement(\"td\");\n        var theoMinusRandomText = document.createTextNode(res.theoricalMinusRandom.toFixed(4).toString());\n        theoMinusRandom.appendChild(theoMinusRandomText);\n        row.appendChild(theoMinusRandom);\n        document.getElementById(\"kolmogorovTableBody\").appendChild(row);\n    });\n    document.getElementById(\"kolmogorovConclusion\").innerHTML = \"\";\n    var resultCalc = document.createElement(\"p\");\n    var resultCalcText = document.createTextNode(\"La D Mayor de entre \".concat(dMinus.toFixed(4), \" y \").concat(dPlus.toFixed(4), \" es: \").concat(biggerD.toFixed(4)));\n    resultCalc.appendChild(resultCalcText);\n    document.getElementById(\"kolmogorovConclusion\").appendChild(resultCalc);\n    var resultTheo = document.createElement(\"p\");\n    var resultTheoText = document.createTextNode(\"El resultado de Kolmogorov-Smirnov en funci\\u00F3n de probabilidad \\u00FAniforme Te\\u00F3rico es: \".concat(theoricalResult.toFixed(4)));\n    resultTheo.appendChild(resultTheoText);\n    document.getElementById(\"kolmogorovConclusion\").appendChild(resultTheo);\n    var resultFinal = document.createElement(\"h4\");\n    var resultText = \"<span class=\\\"\".concat(result ? \"green\" : \"red\", \"\\\"> &#11044; </span> <strong>\").concat(biggerD.toFixed(4), \" \").concat(result ? \"<\" : \"≰\", \" \").concat(theoricalResult.toFixed(4), \"</strong> \");\n    resultFinal.innerHTML = resultText;\n    document.getElementById(\"kolmogorovConclusion\").appendChild(resultFinal);\n}\n\n\n//# sourceURL=webpack:///./src/view.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;